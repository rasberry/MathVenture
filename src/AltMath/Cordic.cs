using System;

namespace MathVenture.AltMath
{
	public static class Cordic
	{
		// https://en.wikipedia.org/wiki/CORDIC
		//returns cos and sin
		public static (double,double) SinCos(double beta, int accuracy = 8)
		{
			var v = (1.0,0.0);
			if (beta < -Const.MathPIo2 || beta > Const.MathPIo2) {
				if (beta < 0.0) {
					v = SinCos(beta + Math.PI,accuracy);
				} else {
					v = SinCos(beta - Math.PI,accuracy);
				}
				v = (-v.Item1,-v.Item2);
				return v;
			}

			double powerOfTwo = 1.0;
			double angle = CordicAngles[0];

			for(int j=0; j<accuracy; j++) {
				double sigma = beta < 0.0 ? -1.0 : 1.0;
				double factor = sigma * powerOfTwo;
				double x = v.Item1 - sigma * (v.Item2 * Math.Pow(2,-j));
				double y = sigma * (v.Item1 * Math.Pow(2,-j)) + v.Item2;
				v = (x,y);
				beta = beta - sigma * angle;
				powerOfTwo /= 2;
				if (j+1 > CordicAngles.Length) {
					angle /= 2;
				} else {
					angle = CordicAngles[j+1];
				}
			}

			int kindex = Math.Clamp(accuracy,0,CordicKValues.Length-1);
			double Kn = CordicKValues[kindex];
			v = (v.Item1 * Kn, v.Item2 * Kn);
			return v;
		}

		public static double Sin(double beta, int accuracy = 8)
		{
			return SinCos(beta,accuracy).Item2;
		}
		public static double Cos(double beta, int accuracy = 8)
		{
			return SinCos(beta,accuracy).Item1;
		}

		//bfloat(atan(2^-n)); n=[0,27]
		static double[] CordicAngles = new double[] {
			7.8539816339744830961566084581988E-1,4.6364760900080611621425623146122E-1,
			2.4497866312686415417208248121128E-1,1.2435499454676143503135484916387E-1,
			6.2418809995957348473979112985505E-2,3.1239833430268276253711744892491E-2,
			1.5623728620476830802801521256570E-2,7.8123410601011112964633918421993E-3,
			3.9062301319669718276286653114244E-3,1.9531225164788186851214826250767E-3,
			9.7656218955931943040343019971729E-4,4.8828121119489827546923962564485E-4,
			2.4414062014936176401672294325966E-4,1.2207031189367020423905864611796E-4,
			6.1035156174208775021662569173829E-5,3.0517578115526096861825953438536E-5,
			1.5258789061315762107231935812698E-5,7.6293945311019702633884823401051E-6,
			3.8146972656064962829230756163730E-6,1.9073486328101870353653693059172E-6,
			9.5367431640596087942067068992311E-7,4.7683715820308885992758382144925E-7,
			2.3841857910155798249094797721893E-7,1.1920928955078068531136849713792E-7,
			5.9604644775390554413921062141789E-8,2.9802322387695303676740132767710E-8,
			1.4901161193847655147092516595963E-8,7.4505805969238279871365645744954E-9
		};

		// b(i) := sqrt(1/(1 + 2^(-2*i)));
		// bfloat(product(b(j),j,0,n)); n=[0,23]
		static double[] CordicKValues = new double[] {
			0.70710678118654752440084436210485,0.63245553203367586639977870888655,
			0.61357199107789634960780908775805,0.60883391251775242102211350754740,
			0.60764825625616820092932166030954,0.60735177014129595905351239038779,
			0.60727764409352599904691536733763,0.60725911229889273006029454182256,
			0.60725447933256232971739808632522,0.60725332108987516334343519856385,
			0.60725303152913433540228465466163,0.60725295913894481363035179763769,
			0.60725294104139716351297018642425,0.60725293651701023412897124207991,
			0.60725293538591350072955560274547,0.60725293510313931731386319806977,
			0.60725293503244577145582519095934,0.60725293501477238499105850756019,
			0.60725293501035403837485076285908,0.60725293500924945172079782206812,
			0.60725293500897330505728452408193,0.60725293500890426839140619566113,
			0.60725293500888700922493661331070,0.60725293500888269443331921770779
		};
	}
}